route[TRANSNEXUS_OUTBOUND] {
	xlog("L_INFO", "Transnexus Outbound Logic - original: $var(orig_rU)");

	# Return if emergency route
	if ($var(orig_rU) =~ $sel(cfg_get.server.emergency_numbers)) {
		return;
	}

	# Only route if request is coming from an Endpoint
	# and is an INVITE

	if (isbflagset(FLB_SRC_CARRIER)) {
		return;
	}

	if (!is_method("INVITE")) {
		return;
	}

	xlog("L_INFO", "Transnexus Outbound Logic - method: $rm");

	#Store the $ru that was selected
	$avp(dr_orig_ruri) = $ru;
	$avp(dr_orig_du) = $du;

	#Send call to clearip server
	$ru = "sip:" + $rU + "@" + $sel(cfg_get.transnexus.authservice_host) + ";transport=tcp";
	$du = $ru;

	#Set a failure route to get the 302
	if (is_method("INVITE")) {
		t_on_reply("TRANSNEXUS_OUTBOUND_REPLY");
		t_on_failure("TRANSNEXUS_OUTBOUND_CARRIER");
	}
}

failure_route[TRANSNEXUS_OUTBOUND_CARRIER] {
	if (t_check_status("302|403|503")) {
		xlog("L_INFO", "Transnexus Outbound Failure Logic");

		#Append Identity Header
		if ($avp(Identity) != "") {
			append_hf("Identity: $avp(Identity)\r\n");
		}

		#Check if contact contains
		if ((int)$sel(cfg_get.transnexus.authservice_lrn_enabled)) {
			#Remove the main branch
			$ru = $null;

			#Get Redirects from Transnexus
			get_redirects("*");

			#Try one contact at a time
			if (!t_load_contacts()) {
				t_reply("500", "Server Internal Error - Cannot load contacts from TransNexus. Check TransNexus config!");
				exit;
			}
			else {
				t_next_contacts();
				t_on_failure("TRANSNEXUS_OUTBOUND_CARRIER_NEXT");
				t_relay();
			}
		}
		else {
			#Send call outbound using dSIPRouter Routes
			$ru = $avp(dr_orig_ruri);
			$du = $avp(dr_orig_du);
			t_relay();
			exit;
		}
	}
}

failure_route[TRANSNEXUS_OUTBOUND_CARRIER_NEXT] {
	if (!t_next_contacts()) {
		t_reply("408", "Request Timeout");
	}
	else {
		t_on_failure("TRANSNEXUS_OUTBOUND_CARRIER_NEXT");
		t_relay();
	}
}

onreply_route[TRANSNEXUS_OUTBOUND_REPLY] {
	if (t_check_status("302|403|503")) {
		#Get Identity header and append it to header.  Look for Identity or X-Identity
		if ($hdr(Identity) != "") {
			$avp(Identity) = $hdr(Identity);
		}
		else if ($hdr(X-Identity) != "") {
			$avp(Identity) = $hdr(X-Identity);
		}

		if ($avp(Identity) != "") {
			xlog("L_INFO", "Identity Header Found: $avp(Identity),$hdr(Reason)");
		}
		else {
			xlog("L_INFO", "Identity Header Not Found");
		}
	}

	if (is_method("BYE")) {
		xlog("L_INFO", "*******TRANSNEXUS_OUTBOUND_REPLY BYE*******");
	}
}

onreply_route[TRANSNEXUS_CARRIER_REPLY] {
	xlog("L_INFO", "*******TRANSNEXUS_CARRIER_REPLY*******");
}

route[TRANSNEXUS_INBOUND] {
	 # Only route if request is coming from an Endpoint
	if (!isbflagset(FLB_SRC_CARRIER)) {
		xlog("L_INFO", "[TRANSNEXUS_INBOUND] <$ci> $si not allowed to talk with Transnexus \n");
		return;
	}

	xlog("L_INFO", "[TRANSNEXUS_INBOUND] Transnexus Inbound Logic");

	#Store the $ru that was selected
	$avp(dr_orig_ruri) = $ru;

	#Send call to clearip server for validation
	$ru = "sip:" + $rU + "@" + $sel(cfg_get.transnexus.verifyservice_host) + ";transport=tcp";

	xlog("L_INFO", "[TRANSNEXUS_INBOUND] ru = $ru");
	#Set a failure route to get the 302
	if (is_method("INVITE")) {
		t_on_reply("TRANSNEXUS_INBOUND_REPLY");
		t_on_failure("TRANSNEXUS_INBOUND_FAILURE");
	}

	t_relay();
	exit;
}

onreply_route[TRANSNEXUS_INBOUND_REPLY] {
	if (t_check_status("302")) {
		#Get Identity header and append it to header
		xlog("L_INFO", "Identity Header: $hdr(Identity),$hdr(Reason)");
		$avp(X-P-Asserted-Identity) = $hdr(P-Asserted-Identity);
	}
}

failure_route[TRANSNEXUS_INBOUND_FAILURE] {
	if (t_check_status("302")) {
		xlog("L_INFO", "Transnexus Inbound Failure Logic");
		t_drop_replies();
		send_reply("100", "Trying");
		append_hf("X-P-Asserted-Identity: $avp(X-P-Asserted-Identity)\r\n");

		# Replace with the original URI
		$ru = $avp(dr_orig_ruri);

		# Import custom logic to route the inbound call
		import_file "transnexus_inbound_custom.cfg"

		route(NEXTHOP);
		return;
	}
}

